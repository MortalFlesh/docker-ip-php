#!/usr/bin/env php
<?php

namespace MF\DockerIp;

use MF\DockerIp\Command\DistributeIpToHostCommand;
use MF\DockerIp\Command\RevertCommand;
use MF\DockerIp\Facade\DistributeIpToHostFacade;
use MF\DockerIp\Service\DockerFile;
use MF\DockerIp\Service\Hosts;
use MF\DockerIp\Service\IfConfig;
use MF\DockerIp\Service\NetResolver;
use MF\DockerIp\Service\RegexHelper;
use MF\DockerIp\Service\StringHelper;
use Symfony\Component\Console\Application;
use Symfony\Component\Process\ProcessBuilder;

function requireIfExists(string $file)
{
    if (file_exists($file)) {
        return require_once $file;
    }

    return null;
}

if (!requireIfExists(__DIR__ . '/../vendor/autoload.php') // when used directly
    && !requireIfExists(__DIR__ . '/../../../autoload.php') // when installed as dependency
) {
    die(
        'You must set up the project dependencies, run the following commands:' . PHP_EOL .
        'curl -sS https://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

date_default_timezone_set('Europe/Prague');

// services definition
$regexHelper = new RegexHelper();
$stringHelper = new StringHelper();

$distributeIpToHostFacade = new DistributeIpToHostFacade(
    new IfConfig(new ProcessBuilder(), $regexHelper),
    new NetResolver(),
    new Hosts($regexHelper, $stringHelper),
    new DockerFile()
);

// app definition
$application = new Application('docker-ip-console', '1.0.0');
$application->addCommands([
    new DistributeIpToHostCommand($distributeIpToHostFacade),
    new RevertCommand($distributeIpToHostFacade),
]);
$application->run();

exit;
